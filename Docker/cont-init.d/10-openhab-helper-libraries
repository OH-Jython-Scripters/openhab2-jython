#!/bin/bash -x

OPENHAB_AUTOMATION="${OPENHAB_CONF}/automation"
OPENHAB_HL_AUTOMATION="${OPENHAB_AUTOMATION}/openhab-helper-libraries/Core/automation"
OPENHAB_HL_AUTOMATION_RELATIVE="../../openhab-helper-libraries/Core/automation"
OPENHAB_HL_URL="https://github.com/openhab-scripters/openhab-helper-libraries/archive/master.zip"

declare -A LANGUAGES=( ["groovy"]="groovy" ["javascript"]="js" ["python"]="py" )

function verify_directory_structure() {
  # before making any changes let's first verify that we can make the required changes
  verify_directory "${OPENHAB_AUTOMATION}"
  for SUBDIR in jsr223 lib; do
    verify_directory "${OPENHAB_AUTOMATION}/${SUBDIR}"
    for LANGUAGE in "${!LANGUAGES[@]}"; do
      verify_directory "${OPENHAB_AUTOMATION}/${SUBDIR}/$LANGUAGE/community"
      verify_directory "${OPENHAB_AUTOMATION}/${SUBDIR}/$LANGUAGE/personal"

      verify_symlink "${OPENHAB_AUTOMATION}/${SUBDIR}/${LANGUAGE}" "core" "${OPENHAB_HL_AUTOMATION_RELATIVE}/${SUBDIR}/${LANGUAGE}/core"
    done
  done
}

function create_directory_structure() {
  create_directory "${OPENHAB_AUTOMATION}"
  for SUBDIR in jsr223 lib; do
    create_directory "${OPENHAB_AUTOMATION}/${SUBDIR}"
    for LANGUAGE in "${!LANGUAGES[@]}"; do
      create_directory "${OPENHAB_AUTOMATION}/${SUBDIR}/$LANGUAGE/community"
      chmod g+w "${OPENHAB_AUTOMATION}/${SUBDIR}/$LANGUAGE/community"
      create_directory "${OPENHAB_AUTOMATION}/${SUBDIR}/$LANGUAGE/personal"
      chmod g+w "${OPENHAB_AUTOMATION}/${SUBDIR}/$LANGUAGE/personal"

      create_symlink "${OPENHAB_AUTOMATION}/${SUBDIR}/${LANGUAGE}" "core" "${OPENHAB_HL_AUTOMATION_RELATIVE}/${SUBDIR}/${LANGUAGE}/core"
    done
  done
}

function verify_directory() {
  local DIRECTORY=$1
  if [ -L "${DIRECTORY}" ]; then
    echo "ERROR: Cannot create directory ${DIRECTORY}. A symlink with that link name already exists."
    exit 1
  elif [ -f "${DIRECTORY}" ]; then
    echo "ERROR: Cannot create directory ${DIRECTORY}. A file with that name already exists."
    exit 1
  fi
}

function create_directory() {
  local DIRECTORY=$1
  if [ ! -d "${DIRECTORY}" ]; then
    mkdir -p "${DIRECTORY}"
    if [ $? -ne 0 ]; then
      echo "ERROR: Could not create directory ${DIRECTORY}."
      exit 1
    fi
  else
    echo "Directory ${DIRECTORY} already exists."
  fi
}

function verify_symlink() {
  local LINK_DIR=$1
  local LINK_NAME=$2
  local TARGET=$3
  if [ -d ${LINK_DIR} ]; then
    cd "${LINK_DIR}"
    if [ -L "${LINK_NAME}" ]; then
      local LINK_TARGET="$(readlink ${LINK_NAME})"
      if [ "${LINK_TARGET}" != "${TARGET}" ]; then
        echo "ERROR: A symlink with ${LINK_NAME} already exists pointing to a different target."
        exit 1
      fi
    elif [ -e "${LINK_NAME}" ]; then
      echo "ERROR: File or directory with name ${LINK_NAME} already exists."
      exit 1
    fi
  fi
}

function create_symlink() {
  local LINK_DIR=$1
  local LINK_NAME=$2
  local TARGET=$3
  cd "${LINK_DIR}"
  if [ ! -L "${LINK_NAME}" ]; then
    ln -rs "${TARGET}" "${LINK_NAME}"
    if [ $? -ne 0 ]; then
      echo "ERROR: Could not create symlink ${LINK_NAME} to ${TARGET}."
      exit 1
    fi
  else
     echo "Symlink ${LINK_NAME} already exists."
  fi
}

function create_initial_configuration() {
  for LANGUAGE in "${!LANGUAGES[@]}"; do
    if [ ! -f "${OPENHAB_AUTOMATION}/lib/${LANGUAGE}/configuration.${LANGUAGES[$LANGUAGE]}" ]; then
      cp "${OPENHAB_HL_AUTOMATION}/lib/${LANGUAGE}/configuration.${LANGUAGES[$LANGUAGE]}.example" "${OPENHAB_AUTOMATION}/lib/${LANGUAGE}/configuration.${LANGUAGES[$LANGUAGE]}"
    fi
  done

  for DIRECTORY in community personal; do
    if [ ! -f "${OPENHAB_AUTOMATION}/lib/python/${DIRECTORY}/__init__.py" ]; then
      touch "${OPENHAB_AUTOMATION}/lib/python/${DIRECTORY}/__init__.py"
    fi
  done
}

function download_helper_libraries() {
  # Download the Helper Libraries for openHAB Scripted Automation
  echo "Downloading openhab-helper-libraries-master archive from Github."
  wget -nv -O /tmp/openhab-helper-libraries-master.zip "${OPENHAB_HL_URL}"
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to download the helper libraries form Github."
    exit 1
  fi

  unzip -q /tmp/openhab-helper-libraries-master.zip -d /tmp -x \
    "openhab-helper-libraries-master/.github/*" \
    "openhab-helper-libraries-master/.gitignore" \
    "openhab-helper-libraries-master/docs/*" \
    "openhab-helper-libraries-master/Docker/*" \
    "openhab-helper-libraries-master/Sphinx/*"
  if [ $? != 0 ]; then
    echo "ERROR: Failed to extract the helper libraries zip file."
    exit 1
  fi

  rm /tmp/openhab-helper-libraries-master.zip
}

function install_helper_libraries() {
  mv /tmp/openhab-helper-libraries-master "${OPENHAB_AUTOMATION}/openhab-helper-libraries"
  # update ownership
  chown -R openhab:openhab "${OPENHAB_AUTOMATION}"
}

function check_addons_config() {
  # Check if the Next Generation Rule Engine is enabled
  MISC_LINE=$(grep '^[[:space:]]\?misc' $1)
  if [ $? -eq 0 ]; then
    # ensure we have ruleengine enabled
    if [[ ${MISC_LINE} == *"ruleengine"* ]]; then
      return 0
    fi
  fi

  return 1
}

function check_next_generation_rule_engine() {

  if check_addons_config "${OPENHAB_CONF}/services/addons.cfg"; then
    echo "New rule engine is already enabled in the addons.cfg."
  elif check_addons_config "$OPENHAB_USERDATA/config/org/openhab/addons.config"; then
    echo "New rule engine is already enabled in the addons.config."
  else
    echo "Please enable the Next Generation Rule Engine."
    echo "See https://www.openhab.org/docs/configuration/rules-ng.html"
  fi
}


if [ ! -d "${OPENHAB_AUTOMATION}/openhab-helper-libraries" ]; then
  CURRENT_DIR=$(pwd)

  # verify if installation is possible
  verify_directory_structure
  download_helper_libraries

  # make the required changes and install the libraries
  create_directory_structure
  install_helper_libraries

  # create initial configuration if required
  create_initial_configuration

  # check if the ng-rule engine is enabled
  check_next_generation_rule_engine

  cd "${CURRENT_DIR}"
else
  echo "Helper Libraries for openHAB Scripted Automation already installed."
fi

